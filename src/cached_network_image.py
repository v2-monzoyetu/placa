import flet as ft
import requests
from pathlib import Path
import hashlib
import base64
from io import BytesIO
from PIL import Image

CACHE_DIR = Path("cache")
CACHE_DIR.mkdir(exist_ok=True)

DEFAULT_IMAGE_BASE64 = (
    ""
)

def get_cache_path(url):
    url_hash = hashlib.md5(url.encode()).hexdigest()
    suffix = Path(url).suffix or ".jpg"
    return CACHE_DIR / f"{url_hash}{suffix}"

def download_image(url, cache_path):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200 and "image" in response.headers.get("Content-Type", "").lower():
            try:
                img = Image.open(BytesIO(response.content))
                img.verify()
            except Exception:
                return False
            with open(cache_path, "wb") as f:
                f.write(response.content)
            return True
        return False
    except Exception:
        return False

def get_image_path(url):
    try:
        cache_path = get_cache_path(url)
        if cache_path.exists():
            return cache_path
        if download_image(url, cache_path):
            return cache_path
        return None
    except Exception:
        return None

def load_image_to_base64(image_path):
    try:
        if not image_path or not Path(image_path).exists():
            return DEFAULT_IMAGE_BASE64
        with Image.open(image_path) as img:
            buffered = BytesIO()
            img_format = img.format or "JPEG"
            img.save(buffered, format=img_format)
            return base64.b64encode(buffered.getvalue()).decode("utf-8")
    except Exception:
        return DEFAULT_IMAGE_BASE64

def cached_network_image(page: ft.Page, link: str):
    image_control = ft.Image(
        src_base64=DEFAULT_IMAGE_BASE64,
        width=250,
        height=250,
        fit=ft.ImageFit.COVER,
        border_radius=ft.border_radius.all(250),
    )

    loading_indicator = ft.ProgressRing(width=50, height=50, visible=True)

    stack = ft.Stack(
        controls=[
            image_control,
            ft.Container(content=loading_indicator, alignment=ft.alignment.center),
        ]
    )

    container = ft.Container(
        content=stack,
        width=260,
        height=260,
        border=ft.border.all(5, ft.Colors.WHITE),
        border_radius=ft.border_radius.all(260),
        padding=5,
        alignment=ft.alignment.center,
    )
    
    try:
        cache_path = get_image_path(link)
        image_base64 = load_image_to_base64(cache_path)

        image_control.src_base64 = image_base64 or DEFAULT_IMAGE_BASE64

    except Exception as e:
        print(f"❌ Erro no cached_network_image: {e}")
        image_control.src_base64 = DEFAULT_IMAGE_BASE64

    loading_indicator.visible = False
    page.update()

    return container
